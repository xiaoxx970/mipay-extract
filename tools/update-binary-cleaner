#!/sbin/sh

ver=
tmp=/tmp/cleaner-fix-apps
imgroot=

if [ "$3" ]; then
    zip=$3
    console=/proc/$$/fd/$2
    # write the location of the console buffer to /tmp/console for other scripts to use
    echo "$console" > /tmp/console
else
    console=$(cat /tmp/console)
    [ "$console" ] || console=/proc/$$/fd/1
fi

print() {
    if [ "$1" ]; then
        echo "ui_print $1" > "$console"
    else
        echo "ui_print  " > "$console"
    fi
    echo
}

abort() {
    [ "$1" ] && {
        print "Error: $1"
        print "Aborting..."
    }
    cleanup
    print "Failed to install xiaomi.eu rom fix!"
    exit 1
}

cleanup() {
    [ "$zip" ] && rm /tmp/console
    [ -d "$tmp" ] && rm -rf "$tmp"
}

extract() {
    rm -rf "$2"
    mkdir -p "$2"
    unzip -o "$1" -d "$2" || abort "Failed to extract zip to $2!"
}

setperm() {
    find "$3" -type d -exec chmod "$1" {} \;
    find "$3" -type f -exec chmod "$2" {} \;
}

rmcache() {
    f="$1"
    [ -d /data/dalvik-cache/ ] || return 0
    app="$(echo $f | tr / @ | cut -c2-)"
    [ -z "$app" ] && return 0
    app="${app}@"
    find /data/dalvik-cache/ -iname "${app}*" |
        while read i; do
            j="$(basename $i)"
            print "Clean cache: ${j/${app}/}"
            rm -f "$i"
        done
}

rmprop() {
    f="$2"
    if ! [ -f "$f" ]; then
        f="${imgroot}${f}"
    fi
    if ! [ -f "$f" ]; then
        abort "$(basename "$f") not found."
    fi
    if grep -q "^[[:space:]]*$1[[:space:]]*=" "$f"; then
        sed -i "s/^[[:space:]]*$1[[:space:]]*=/#$1=/" "$f" && \
            print "Comment out property: $1" || \
            print "Failed to modify property: $1"
    fi
}

print "*******************************"
print "* MIUI 9/10 xiaomi.eu Rom Fix *"
print "*******************************"
print "by @linusyang"
print "version: $ver"

print "Mounting filesystems..."
mount /system
if mount | grep ro | grep -q /system; then
    mount -o remount,rw /system || print "Failed to mount read-write!"
    print 'Remount as read-write...'
fi

[ "$zip" ] && {
    extract "$zip" "$tmp"
}
cd "$tmp"

if [ -d "/system/system/app" ]; then
    print 'New image structure detected.'
    imgroot=/system
fi

app_list=""
for f in ./system/priv-app/*; do
    app_list="${app_list} ${imgroot}/system/priv-app/$(basename $f)"
done
if [ -d ./system/app ]; then
    for f in ./system/app/*; do
        app_list="${app_list} ${imgroot}/system/app/$(basename $f)"
    done
fi
if [ -d ./system/framework ]; then
    for f in ./system/framework/*; do
        app_list="${app_list} ${imgroot}/system/framework/$(basename $f)"
    done
fi

print "Clean files..."
rm -rf $app_list

print "Adding files..."
cp -R ./system/priv-app/* ${imgroot}/system/priv-app/ || abort "Failed to copy priv-apps"
if [ -d ./system/app ]; then
    cp -R ./system/app/* ${imgroot}/system/app/ || abort "Failed to copy apps"
fi
if [ -d ./system/framework ]; then
    cp -R ./system/framework/* ${imgroot}/system/framework/ || abort "Failed to copy frameworks"
fi

print "Setting correct permissions..."
for f in $app_list; do
    print "Fixing permission: $f"
    setperm 0755 0644 $f
    rmcache $f
done

#extra_patches

umount /system
cleanup
print "Finished!"
